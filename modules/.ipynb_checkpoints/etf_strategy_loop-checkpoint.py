{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "33f9265c-3141-463f-bd11-728fefb164c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# General libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "from os.path import exists\n",
    "import os\n",
    "\n",
    "# API Based Libraries\n",
    "import pandas_market_calendars as mcal\n",
    "from pandas_datareader import data as pdr\n",
    "import yfinance as yf\n",
    "import scipy as sc\n",
    "yf.pdr_override()\n",
    "\n",
    "# module that refresh data\n",
    "from initial_data_load import refresh_data_tables\n",
    "# import function for portfolio optimizer\n",
    "from sh_optimizer_etf import portfolio_perform, port_std, neg_sharperatio, max_sf\n",
    "# import prediction model\n",
    "from etf_reg_model import prep_and_train\n",
    "\n",
    "#file for tearsheet\n",
    "import pyfolio as pf\n",
    "\n",
    "# turn off warning signs for cleaner code\n",
    "from warnings import filterwarnings\n",
    "filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "57ddfefa-e6d6-439f-97ef-ecd2a6fb68b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data is already up for today.\n",
      "1/1 [==============================] - 0s 46ms/step\n",
      "Optimizer is 0.043478260869565216% complete\n",
      "1/1 [==============================] - 0s 46ms/step\n",
      "Optimizer is 0.08695652173913043% complete\n",
      "1/1 [==============================] - 0s 53ms/step\n",
      "Optimizer is 0.13043478260869565% complete\n",
      "1/1 [==============================] - 0s 44ms/step\n",
      "Optimizer is 0.17391304347826086% complete\n",
      "WARNING:tensorflow:5 out of the last 5 calls to <function Model.make_predict_function.<locals>.predict_function at 0x0000026F11E7A790> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
      "1/1 [==============================] - 0s 49ms/step\n",
      "Optimizer is 0.21739130434782608% complete\n",
      "WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x0000026F11BFFC10> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
      "1/1 [==============================] - 0s 44ms/step\n",
      "Optimizer is 0.2608695652173913% complete\n",
      "1/1 [==============================] - 0s 253ms/step\n",
      "Optimizer is 0.30434782608695654% complete\n",
      "1/1 [==============================] - 0s 42ms/step\n",
      "Optimizer is 0.34782608695652173% complete\n",
      "1/1 [==============================] - 0s 44ms/step\n",
      "Optimizer is 0.3913043478260869% complete\n",
      "1/1 [==============================] - 0s 45ms/step\n",
      "Optimizer is 0.4347826086956521% complete\n",
      "1/1 [==============================] - 0s 76ms/step\n",
      "Optimizer is 0.4782608695652173% complete\n",
      "1/1 [==============================] - 0s 49ms/step\n",
      "Optimizer is 0.5217391304347825% complete\n",
      "1/1 [==============================] - 0s 46ms/step\n",
      "Optimizer is 0.5652173913043477% complete\n",
      "1/1 [==============================] - 0s 48ms/step\n",
      "Optimizer is 0.6086956521739129% complete\n",
      "1/1 [==============================] - 0s 46ms/step\n",
      "Optimizer is 0.652173913043478% complete\n",
      "1/1 [==============================] - 0s 44ms/step\n",
      "Optimizer is 0.6956521739130432% complete\n",
      "1/1 [==============================] - 0s 48ms/step\n",
      "Optimizer is 0.7391304347826084% complete\n",
      "1/1 [==============================] - 0s 48ms/step\n",
      "Optimizer is 0.7826086956521736% complete\n",
      "1/1 [==============================] - 0s 65ms/step\n",
      "Optimizer is 0.8260869565217388% complete\n",
      "1/1 [==============================] - 0s 45ms/step\n",
      "Optimizer is 0.869565217391304% complete\n",
      "1/1 [==============================] - 0s 49ms/step\n",
      "Optimizer is 0.9130434782608692% complete\n",
      "1/1 [==============================] - 0s 44ms/step\n",
      "Optimizer is 0.9565217391304344% complete\n",
      "1/1 [==============================] - 0s 44ms/step\n",
      "Optimizer is 0.9999999999999996% complete\n"
     ]
    }
   ],
   "source": [
    "def etf_strategy()\n",
    "    if not exists(f\"../csv_files/trade_dates_{today}.csv\"):\n",
    "    \n",
    "    # Create a dataframe to store portfolio return data\n",
    "    final_port_return = pd.DataFrame(columns=['return'])\n",
    "    etf_predictions = pd.DataFrame()\n",
    "\n",
    "    # Create Global variable to update on status\n",
    "    global opt_pct\n",
    "    opt_pct = 0\n",
    "\n",
    "    # Get today's date for reference\n",
    "    today = dt.date.today()\n",
    "\n",
    "    # Check to see if data has been updated\n",
    "    refresh_data_tables()\n",
    "\n",
    "    # etf monthly returns\n",
    "    etf_data = pd.read_csv(f\"../csv_files/etf_{today}.csv\", index_col=0, parse_dates=True, infer_datetime_format=True)\n",
    "\n",
    "    # Get econ data\n",
    "    econ_data = pd.read_csv(f\"../csv_files/econ_data_{today}.csv\", index_col=0, parse_dates=True, infer_datetime_format=True)\n",
    "\n",
    "    # get full stock data\n",
    "    stock_data = pd.read_csv(f\"../csv_files/snp_500_stocks_{today}.csv\", index_col=0, parse_dates=True, infer_datetime_format=True)\n",
    "\n",
    "    # Convert datetimes to dates\n",
    "    dates = etf_data.index.tolist()\n",
    "    dates2 = econ_data.index.tolist()\n",
    "    dates3 = stock_data.index.tolist()\n",
    "    def makethisdate(date):\n",
    "        new = date.date()\n",
    "        new = str(new)\n",
    "        new = pd.to_datetime(new)\n",
    "        return new\n",
    "    dates = list(map(makethisdate, dates))\n",
    "    dates2 = list(map(makethisdate, dates2))\n",
    "    dates3 = list(map(makethisdate, dates3))\n",
    "    etf_data.index = dates\n",
    "    econ_data.index = dates2\n",
    "    stock_data.index = dates3\n",
    "\n",
    "    # get list of trading dates\n",
    "    trading_days = pd.read_csv(f\"../csv_files/trade_dates_{today}.csv\", index_col=0)\n",
    "    # get end of months for reference\n",
    "    month_ends = trading_days[trading_days['end_of_month']==True][\"dates\"]\n",
    "    month_ends = pd.to_datetime(month_ends)\n",
    "\n",
    "    # Create Benchmark Table\n",
    "    bench = stock_data[['SPY']]\n",
    "\n",
    "    # Get etfs returns for coverance\n",
    "    etf_prices = etf_data.iloc[:,-11:]\n",
    "    # filter ETF data for monthly\n",
    "    etf_data = etf_data[etf_data.index.isin(month_ends)]\n",
    "    # update prices to % changes\n",
    "    etf_data.iloc[:,-11:] = etf_data.iloc[:,-11:].pct_change().shift(-1)\n",
    "\n",
    "    # combined econ and return data\n",
    "    model_data = pd.concat([econ_data, etf_data], axis=1)\n",
    "    model_data = model_data.dropna()\n",
    "\n",
    "    month_ends = month_ends[month_ends > (today-pd.DateOffset(months=24))]\n",
    "    month_ends = month_ends[:-1]\n",
    "\n",
    "    for i in month_ends:\n",
    "        # Get the start date\n",
    "        start = i-pd.DateOffset(months=6)\n",
    "\n",
    "        # Define the SPY data to use for analysis\n",
    "        temp_table = etf_prices[start:i]\n",
    "        bench_temp = bench[start:i]\n",
    "        bench_temp = bench.pct_change()\n",
    "        bench_std = bench.std()*np.sqrt(252)\n",
    "\n",
    "        # Get Data for optimization\n",
    "        def getData(stockdata):\n",
    "            returns = stockdata.pct_change().dropna(how='all').dropna(axis=1)\n",
    "            return_list = returns.columns.T.to_list()\n",
    "            mean_returns = returns.mean()\n",
    "            cov_matrix = returns.cov()\n",
    "            return mean_returns, cov_matrix, return_list\n",
    "\n",
    "        # Get data needed for optimizer\n",
    "        mean_returns, cov_matrix, return_list = getData(stockdata=temp_table)\n",
    "\n",
    "        # Predict etf returns\n",
    "        prediction = prep_and_train(model_data, i);\n",
    "        prediction = pd.DataFrame(prediction.tolist(), columns = return_list).mean()\n",
    "\n",
    "        # Run Optimizer\n",
    "        results = max_sf(prediction, cov_matrix, bench_std)\n",
    "        # pull otimimal weights and sharpe ratio\n",
    "        max_sr, opt_weights = results['fun']*(-1),results['x']\n",
    "\n",
    "        # Get list of optimal stocks weights\n",
    "        stock_weights = pd.DataFrame(opt_weights, index = return_list).T\n",
    "\n",
    "        # Get stock returns for following month\n",
    "        next_month = i+pd.DateOffset(months=1)\n",
    "        next_period = next_month.strftime('%Y-%m')\n",
    "\n",
    "        returns = etf_prices[start:next_month].pct_change().dropna(how='all').dropna(axis=1)\n",
    "        returns = returns[next_period]\n",
    "\n",
    "        # Calculate daily returns for the portfolio\n",
    "        cum_returns = (returns+1).cumprod() # get the cumulative returns for all stocks\n",
    "        weight_cum_returns = cum_returns.multiply(np.array(stock_weights), axis='columns') # multiply cumulative returns by weights\n",
    "        portfolio_returns = pd.DataFrame(columns=['cum_return'])\n",
    "        portfolio_returns['cum_return'] = weight_cum_returns.sum(axis=1) # sum up cumulative returns\n",
    "        portfolio_returns['return'] = portfolio_returns.pct_change() # calculate daily returns\n",
    "        portfolio_returns['return'].iloc[0] = portfolio_returns['cum_return'].iloc[0]-1 # fill in first day\n",
    "\n",
    "        # Append data to final portfolio return table\n",
    "        final_port_return = final_port_return.append(portfolio_returns[['return']])\n",
    "\n",
    "        # Update the optimizer status\n",
    "        opt_pct = opt_pct + (1/23)\n",
    "        \n",
    "    # Export to csv file\n",
    "    csv_path = f\"../csv_files/etf_strategy_returns_{today}.csv\"\n",
    "    stock_data.to_csv(csv_path)\n",
    "    \n",
    "    return final_port_return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c589c42c-e58a-4cb1-bf9c-617c097e48f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-07-01</th>\n",
       "      <td>0.001371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-02</th>\n",
       "      <td>0.005114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-06</th>\n",
       "      <td>0.002543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-07</th>\n",
       "      <td>0.003829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-08</th>\n",
       "      <td>-0.003843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-22</th>\n",
       "      <td>-0.001463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-23</th>\n",
       "      <td>-0.007798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-24</th>\n",
       "      <td>-0.009195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-25</th>\n",
       "      <td>-0.004566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-05-26</th>\n",
       "      <td>0.004226</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>466 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              return\n",
       "2021-07-01  0.001371\n",
       "2021-07-02  0.005114\n",
       "2021-07-06  0.002543\n",
       "2021-07-07  0.003829\n",
       "2021-07-08 -0.003843\n",
       "...              ...\n",
       "2023-05-22 -0.001463\n",
       "2023-05-23 -0.007798\n",
       "2023-05-24 -0.009195\n",
       "2023-05-25 -0.004566\n",
       "2023-05-26  0.004226\n",
       "\n",
       "[466 rows x 1 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_port_return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "24f7556b-9033-4af3-9dd1-2f284f30a60f",
   "metadata": {},
   "outputs": [],
   "source": [
    "start = today-pd.DateOffset(months=23)\n",
    "end = today"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9c08d80e-3c06-4a53-9d93-917cf391d61b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>XLE</th>\n",
       "      <th>XLB</th>\n",
       "      <th>XLI</th>\n",
       "      <th>XLU</th>\n",
       "      <th>VHT</th>\n",
       "      <th>XLF</th>\n",
       "      <th>XLY</th>\n",
       "      <th>VDC</th>\n",
       "      <th>VGT</th>\n",
       "      <th>VOX</th>\n",
       "      <th>IYR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.01</td>\n",
       "      <td>0.013289</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.116711</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    XLE       XLB  XLI  XLU   VHT   XLF   XLY       VDC   VGT   VOX   IYR\n",
       "0  0.01  0.013289  0.4  0.4  0.01  0.01  0.01  0.116711  0.01  0.01  0.01"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stock_weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bede735e-d6ac-47d0-9c5b-3c469ea96e32",
   "metadata": {},
   "outputs": [],
   "source": [
    "bench['return']=bench[start:].pct_change()\n",
    "bench['cum_return'] = (bench['return']+1).cumprod()\n",
    "final_port_return['cum_return'] = (final_port_return['return']+1).cumprod()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d4e7c241-a594-4b3f-ac28-5d632c6a6b82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_port_return['cum_return'].plot()\n",
    "bench['cum_return'].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bc079935-1532-4904-97e6-e522121a3570",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\"><th>Start date</th><td colspan=2>2021-07-01</td></tr>\n",
       "    <tr style=\"text-align: right;\"><th>End date</th><td colspan=2>2023-05-26</td></tr>\n",
       "    <tr style=\"text-align: right;\"><th>Total months</th><td colspan=2>22</td></tr>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Backtest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual return</th>\n",
       "      <td>1.4%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cumulative returns</th>\n",
       "      <td>2.7%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Annual volatility</th>\n",
       "      <td>17.6%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sharpe ratio</th>\n",
       "      <td>0.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Calmar ratio</th>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stability</th>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Max drawdown</th>\n",
       "      <td>-20.5%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Omega ratio</th>\n",
       "      <td>1.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sortino ratio</th>\n",
       "      <td>0.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Skew</th>\n",
       "      <td>-0.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kurtosis</th>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tail ratio</th>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Daily value at risk</th>\n",
       "      <td>-2.2%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alpha</th>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Beta</th>\n",
       "      <td>0.79</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "AttributeError",
     "evalue": "'numpy.int64' object has no attribute 'to_pydatetime'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_38120\\1406648862.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mfig\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcreate_returns_tear_sheet\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfinal_port_return\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'return'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbenchmark_rets\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mbench\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'return'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreturn_fig\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\envs\\dev\\lib\\site-packages\\pyfolio\\plotting.py\u001b[0m in \u001b[0;36mcall_w_context\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     50\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mset_context\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     51\u001b[0m             \u001b[1;32mwith\u001b[0m \u001b[0mplotting_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxes_style\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 52\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     53\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     54\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\envs\\dev\\lib\\site-packages\\pyfolio\\tears.py\u001b[0m in \u001b[0;36mcreate_returns_tear_sheet\u001b[1;34m(returns, positions, transactions, live_start_date, cone_std, benchmark_rets, bootstrap, turnover_denom, header_rows, return_fig)\u001b[0m\n\u001b[0;32m    502\u001b[0m                              header_rows=header_rows)\n\u001b[0;32m    503\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 504\u001b[1;33m     \u001b[0mplotting\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow_worst_drawdown_periods\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mreturns\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    505\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    506\u001b[0m     \u001b[0mvertical_sections\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m11\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\envs\\dev\\lib\\site-packages\\pyfolio\\plotting.py\u001b[0m in \u001b[0;36mshow_worst_drawdown_periods\u001b[1;34m(returns, top)\u001b[0m\n\u001b[0;32m   1662\u001b[0m     \"\"\"\n\u001b[0;32m   1663\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1664\u001b[1;33m     \u001b[0mdrawdown_df\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtimeseries\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgen_drawdown_table\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mreturns\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtop\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtop\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1665\u001b[0m     utils.print_table(\n\u001b[0;32m   1666\u001b[0m         \u001b[0mdrawdown_df\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Net drawdown in %'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mascending\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\envs\\dev\\lib\\site-packages\\pyfolio\\timeseries.py\u001b[0m in \u001b[0;36mgen_drawdown_table\u001b[1;34m(returns, top)\u001b[0m\n\u001b[0;32m   1006\u001b[0m         df_drawdowns.loc[i, 'Peak date'] = (peak.to_pydatetime()\n\u001b[0;32m   1007\u001b[0m                                             .strftime('%Y-%m-%d'))\n\u001b[1;32m-> 1008\u001b[1;33m         df_drawdowns.loc[i, 'Valley date'] = (valley.to_pydatetime()\n\u001b[0m\u001b[0;32m   1009\u001b[0m                                               .strftime('%Y-%m-%d'))\n\u001b[0;32m   1010\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrecovery\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'numpy.int64' object has no attribute 'to_pydatetime'"
     ]
    }
   ],
   "source": [
    "fig = pf.create_returns_tear_sheet(final_port_return['return'], benchmark_rets=bench['return'], return_fig=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "444205df-bd77-4e1d-96e1-db272c04e62d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2021-06-30 00:00:00')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee1df17e-2803-4325-853a-d29ca27a0ecc",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_table = model_data\n",
    "\n",
    "# Set up Test & Train Data\n",
    "train = temp_table[:-1]\n",
    "test = temp_table[-1:]\n",
    "\n",
    "# create x and y tables\n",
    "X_train = train.iloc[:,:-11]\n",
    "y_train = train.iloc[:,-11:]\n",
    "X_test = test.iloc[:,:-11]\n",
    "y_test = test.iloc[:,-11:]\n",
    "\n",
    "# Create a data scaler\n",
    "X_train.std(ddof=1)\n",
    "scaler = StandardScaler()\n",
    "X_scaler = scaler.fit(X_train)\n",
    "X_scaler = X_scaler.transform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e9f73c87-8f34-4786-9943-eea49a7dc0ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EFFR</th>\n",
       "      <th>FEDFUNDS</th>\n",
       "      <th>CSUSHPINSA</th>\n",
       "      <th>T10YIEM</th>\n",
       "      <th>T5YIEM</th>\n",
       "      <th>PSAVERT</th>\n",
       "      <th>CIVPART</th>\n",
       "      <th>TB3MS</th>\n",
       "      <th>REAINTRATREARAT10Y</th>\n",
       "      <th>MORTGAGE30US</th>\n",
       "      <th>...</th>\n",
       "      <th>VOX_top_boll_pct</th>\n",
       "      <th>VOX_bot_boll_pct</th>\n",
       "      <th>VOX_fib</th>\n",
       "      <th>VOX_cum_month</th>\n",
       "      <th>IYR_3ma_pct</th>\n",
       "      <th>IYR_100ma_pct</th>\n",
       "      <th>IYR_top_boll_pct</th>\n",
       "      <th>IYR_bot_boll_pct</th>\n",
       "      <th>IYR_fib</th>\n",
       "      <th>IYR_cum_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2003-07-31</th>\n",
       "      <td>-0.41</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>1.422</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.8</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>0.223573</td>\n",
       "      <td>0.70</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2003-08-29</th>\n",
       "      <td>-0.03</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1.318</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.32</td>\n",
       "      <td>-0.2</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.623015</td>\n",
       "      <td>0.38</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2003-09-30</th>\n",
       "      <td>0.16</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>1.111</td>\n",
       "      <td>-0.05</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.145534</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2003-10-31</th>\n",
       "      <td>-0.20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.900</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>-0.516419</td>\n",
       "      <td>-0.04</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2003-11-28</th>\n",
       "      <td>0.04</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.789</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.333082</td>\n",
       "      <td>-0.05</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-12-30</th>\n",
       "      <td>0.50</td>\n",
       "      <td>0.32</td>\n",
       "      <td>-2.543</td>\n",
       "      <td>-0.11</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.10</td>\n",
       "      <td>-0.354588</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>...</td>\n",
       "      <td>0.083903</td>\n",
       "      <td>-0.039110</td>\n",
       "      <td>0.243235</td>\n",
       "      <td>-0.071744</td>\n",
       "      <td>-1.781671e-03</td>\n",
       "      <td>0.030055</td>\n",
       "      <td>0.073368</td>\n",
       "      <td>-0.091715</td>\n",
       "      <td>0.207956</td>\n",
       "      <td>-0.047335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-31</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.23</td>\n",
       "      <td>-1.822</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.206974</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.006924</td>\n",
       "      <td>-0.177953</td>\n",
       "      <td>0.989583</td>\n",
       "      <td>0.151132</td>\n",
       "      <td>-8.928195e-03</td>\n",
       "      <td>-0.080098</td>\n",
       "      <td>-0.007312</td>\n",
       "      <td>-0.123776</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.090706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-02-28</th>\n",
       "      <td>0.24</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.946</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.11</td>\n",
       "      <td>-0.362897</td>\n",
       "      <td>0.37</td>\n",
       "      <td>...</td>\n",
       "      <td>0.104171</td>\n",
       "      <td>-0.138648</td>\n",
       "      <td>0.013207</td>\n",
       "      <td>-0.042014</td>\n",
       "      <td>2.937422e-08</td>\n",
       "      <td>-0.013559</td>\n",
       "      <td>0.085022</td>\n",
       "      <td>-0.056339</td>\n",
       "      <td>0.010895</td>\n",
       "      <td>-0.052557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-03-31</th>\n",
       "      <td>0.26</td>\n",
       "      <td>0.08</td>\n",
       "      <td>3.687</td>\n",
       "      <td>-0.03</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.639434</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>...</td>\n",
       "      <td>0.022144</td>\n",
       "      <td>-0.114977</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.065146</td>\n",
       "      <td>-1.778563e-02</td>\n",
       "      <td>0.016499</td>\n",
       "      <td>0.118740</td>\n",
       "      <td>-0.066716</td>\n",
       "      <td>0.678775</td>\n",
       "      <td>-0.017452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-04-28</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.000</td>\n",
       "      <td>-0.03</td>\n",
       "      <td>-0.07</td>\n",
       "      <td>-0.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.23</td>\n",
       "      <td>-0.615722</td>\n",
       "      <td>0.11</td>\n",
       "      <td>...</td>\n",
       "      <td>0.017599</td>\n",
       "      <td>-0.110098</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.048442</td>\n",
       "      <td>-1.575631e-02</td>\n",
       "      <td>0.004897</td>\n",
       "      <td>0.084880</td>\n",
       "      <td>-0.085462</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.043351</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>238 rows × 91 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            EFFR  FEDFUNDS  CSUSHPINSA  T10YIEM  T5YIEM  PSAVERT  CIVPART  \\\n",
       "2003-07-31 -0.41     -0.21       1.422     0.26    0.21      0.8     -0.3   \n",
       "2003-08-29 -0.03      0.02       1.318     0.26    0.32     -0.2     -0.1   \n",
       "2003-09-30  0.16     -0.02       1.111    -0.05    0.00     -0.8      0.0   \n",
       "2003-10-31 -0.20      0.00       0.900     0.13    0.09      0.2      0.0   \n",
       "2003-11-28  0.04     -0.01       0.789     0.13    0.04      0.0      0.0   \n",
       "...          ...       ...         ...      ...     ...      ...      ...   \n",
       "2022-12-30  0.50      0.32      -2.543    -0.11   -0.12      0.2      0.1   \n",
       "2023-01-31  0.00      0.23      -1.822    -0.02   -0.09      0.3      0.1   \n",
       "2023-02-28  0.24      0.24       0.946     0.09    0.22      0.3      0.1   \n",
       "2023-03-31  0.26      0.08       3.687    -0.03   -0.07      0.2      0.1   \n",
       "2023-04-28  0.00      0.18       0.000    -0.03   -0.07     -0.4      0.0   \n",
       "\n",
       "            TB3MS  REAINTRATREARAT10Y  MORTGAGE30US  ...  VOX_top_boll_pct  \\\n",
       "2003-07-31  -0.02            0.223573          0.70  ...               NaN   \n",
       "2003-08-29   0.05            0.623015          0.38  ...               NaN   \n",
       "2003-09-30  -0.01            0.145534         -0.34  ...               NaN   \n",
       "2003-10-31  -0.02           -0.516419         -0.04  ...               NaN   \n",
       "2003-11-28   0.01            0.333082         -0.05  ...               NaN   \n",
       "...           ...                 ...           ...  ...               ...   \n",
       "2022-12-30   0.10           -0.354588         -0.16  ...          0.083903   \n",
       "2023-01-31   0.29            0.206974         -0.29  ...         -0.006924   \n",
       "2023-02-28   0.11           -0.362897          0.37  ...          0.104171   \n",
       "2023-03-31   0.04            0.639434         -0.18  ...          0.022144   \n",
       "2023-04-28   0.23           -0.615722          0.11  ...          0.017599   \n",
       "\n",
       "            VOX_bot_boll_pct   VOX_fib  VOX_cum_month   IYR_3ma_pct  \\\n",
       "2003-07-31               NaN       NaN            NaN           NaN   \n",
       "2003-08-29               NaN       NaN            NaN           NaN   \n",
       "2003-09-30               NaN       NaN            NaN           NaN   \n",
       "2003-10-31               NaN       NaN            NaN           NaN   \n",
       "2003-11-28               NaN       NaN            NaN           NaN   \n",
       "...                      ...       ...            ...           ...   \n",
       "2022-12-30         -0.039110  0.243235      -0.071744 -1.781671e-03   \n",
       "2023-01-31         -0.177953  0.989583       0.151132 -8.928195e-03   \n",
       "2023-02-28         -0.138648  0.013207      -0.042014  2.937422e-08   \n",
       "2023-03-31         -0.114977  1.000000       0.065146 -1.778563e-02   \n",
       "2023-04-28         -0.110098  1.000000       0.048442 -1.575631e-02   \n",
       "\n",
       "            IYR_100ma_pct  IYR_top_boll_pct  IYR_bot_boll_pct   IYR_fib  \\\n",
       "2003-07-31            NaN               NaN               NaN       NaN   \n",
       "2003-08-29            NaN               NaN               NaN       NaN   \n",
       "2003-09-30            NaN               NaN               NaN       NaN   \n",
       "2003-10-31            NaN               NaN               NaN       NaN   \n",
       "2003-11-28            NaN               NaN               NaN       NaN   \n",
       "...                   ...               ...               ...       ...   \n",
       "2022-12-30       0.030055          0.073368         -0.091715  0.207956   \n",
       "2023-01-31      -0.080098         -0.007312         -0.123776  1.000000   \n",
       "2023-02-28      -0.013559          0.085022         -0.056339  0.010895   \n",
       "2023-03-31       0.016499          0.118740         -0.066716  0.678775   \n",
       "2023-04-28       0.004897          0.084880         -0.085462  1.000000   \n",
       "\n",
       "            IYR_cum_month  \n",
       "2003-07-31            NaN  \n",
       "2003-08-29            NaN  \n",
       "2003-09-30            NaN  \n",
       "2003-10-31            NaN  \n",
       "2003-11-28            NaN  \n",
       "...                   ...  \n",
       "2022-12-30      -0.047335  \n",
       "2023-01-31       0.090706  \n",
       "2023-02-28      -0.052557  \n",
       "2023-03-31      -0.017452  \n",
       "2023-04-28       0.043351  \n",
       "\n",
       "[238 rows x 91 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26bf33e8-1026-44d6-b5d0-f1409e2572f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (dev)",
   "language": "python",
   "name": "dev"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
